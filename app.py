import streamlit as st
import pandas as pd
import zipfile
import tempfile
import os
import json
from pathlib import Path
import time
from io import BytesIO
from concurrent.futures import ThreadPoolExecutor
import matplotlib.pyplot as plt
import seaborn as sns

# Importa√ß√µes dos m√≥dulos
from modules.estoque_veiculos import processar_xmls
from modules.configurador_planilha import configurar_planilha
from modules.transformadores_veiculos import (
    gerar_estoque_fiscal,
    gerar_alertas_auditoria,
    gerar_kpis,
    gerar_resumo_mensal
)
from modules.apuracao_fiscal import calcular_apuracao

# Utilidades
from utils.filtros_utils import obter_anos_meses_unicos, aplicar_filtro_periodo
from utils.formatador_utils import formatar_moeda, formatar_percentual
from utils.interface_utils import formatar_df_exibicao
from utils.google_drive_utils import (
    criar_servico_drive,
    baixar_xmls_empresa_zip,
    ROOT_FOLDER_ID,
)

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Painel Fiscal de Ve√≠culos", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilo personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 32px;
        font-weight: bold;
        color: #1E3A8A;
        margin-bottom: 20px;
    }
    .sub-header {
        font-size: 24px;
        font-weight: bold;
        color: #2563EB;
        margin-top: 15px;
        margin-bottom: 10px;
    }
    .card {
        padding: 20px;
        border-radius: 10px;
        background-color: #F3F4F6;
        margin-bottom: 20px;
    }
    .info-card {
        padding: 15px;
        border-radius: 8px;
        background-color: #E0F2FE;
        border-left: 4px solid #0284C7;
        margin-bottom: 15px;
    }
    .warning-card {
        padding: 15px;
        border-radius: 8px;
        background-color: #FEF3C7;
        border-left: 4px solid #D97706;
        margin-bottom: 15px;
    }
    .success-card {
        padding: 15px;
        border-radius: 8px;
        background-color: #D1FAE5;
        border-left: 4px solid #059669;
        margin-bottom: 15px;
    }
</style>
""", unsafe_allow_html=True)

# T√≠tulo principal
st.markdown('<div class="main-header">üöó Painel Fiscal de Ve√≠culos</div>', unsafe_allow_html=True)

# Inicializa√ß√£o de estado da sess√£o
if 'dados_processados' not in st.session_state:
    st.session_state.dados_processados = False
if 'df_configurado' not in st.session_state:
    st.session_state.df_configurado = None
if 'df_estoque' not in st.session_state:
    st.session_state.df_estoque = None
if 'df_alertas' not in st.session_state:
    st.session_state.df_alertas = None
if 'df_resumo' not in st.session_state:
    st.session_state.df_resumo = None
if 'df_apuracao' not in st.session_state:
    st.session_state.df_apuracao = None
if 'kpis' not in st.session_state:
    st.session_state.kpis = None

# Configura√ß√£o da sidebar
with st.sidebar:
    st.markdown('<div class="sub-header">‚öôÔ∏è Configura√ß√µes</div>', unsafe_allow_html=True)

    # üîπ Sele√ß√£o da Empresa
    try:
        config_path = Path(__file__).parent / 'config' / 'empresas_config.json'
        with open(config_path, encoding='utf-8') as f:
            empresas = json.load(f)
    except Exception as e:
        st.error(f"Erro ao carregar configura√ß√£o de empresas: {e}")

    opcoes_empresas = {v['nome']: k for k, v in empresas.items()}
    
    if not opcoes_empresas:
        st.warning("Nenhuma empresa configurada. Por favor, adicione empresas ao arquivo config/empresas_config.json")
        empresa_selecionada_nome = None
        chave_empresa = None
        cnpj_empresa = None
    else:
        empresa_selecionada_nome = st.selectbox(
            "üè¢ Selecione a Empresa", options=opcoes_empresas.keys()
        )
        chave_empresa = opcoes_empresas[empresa_selecionada_nome]
        cnpj_empresa = empresas[chave_empresa]["cnpj_emitentes"][0]
        st.markdown(f"**CNPJ Selecionado:** `{cnpj_empresa}`")



    # Bot√£o para limpar dados
    if st.session_state.dados_processados:
        if st.button("üóëÔ∏è Limpar Dados Processados"):
            st.session_state.dados_processados = False
            st.session_state.df_configurado = None
            st.session_state.df_estoque = None
            st.session_state.df_alertas = None
            st.session_state.df_resumo = None
            st.session_state.df_apuracao = None
            st.session_state.kpis = None
            st.success("Dados limpos com sucesso!")
            st.experimental_rerun()

    # Sobre o projeto
    st.markdown("---")
    st.markdown("### üìå Sobre")
    st.markdown("""
    Esta aplica√ß√£o analisa XMLs de notas fiscais para gera√ß√£o de:
    
    - Controle de estoque fiscal
    - An√°lise de entrada/sa√≠da
    - C√°lculo tribut√°rio
    - Relat√≥rios gerenciais
    """)

# Fun√ß√£o utilit√°ria para gerar Excel
def gerar_excel(df, nome_abas="Relatorio"):
    output = BytesIO()
    df_export = df.copy()

    # Convers√£o segura de tipos de dados
    for col in df_export.columns:
        if pd.api.types.is_datetime64_any_dtype(df_export[col]):
            df_export[col] = df_export[col].dt.strftime('%d/%m/%Y').fillna('')
        elif df_export[col].dtype == 'object':  # Usando object em vez de 'O'
            df_export[col] = df_export[col].apply(lambda x: str(x) if pd.notnull(x) else '')
        elif df_export[col].name.lower().startswith(('valor', 'lucro', 'total')):
            # Formatar colunas monet√°rias
            df_export[col] = pd.to_numeric(df_export[col], errors='coerce').fillna(0)

    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df_export.to_excel(writer, index=False, sheet_name=nome_abas[:31])
        
        # Formatar colunas
        workbook = writer.book
        worksheet = writer.sheets[nome_abas[:31]]
        
        # Formato monet√°rio
        formato_moeda = workbook.add_format({'num_format': 'R$ #,##0.00'})
        
        # Aplicar formatos por tipo de coluna
        for i, col in enumerate(df_export.columns):
            col_lower = col.lower()
            if any(termo in col_lower for termo in ['valor', 'lucro', 'total']):
                worksheet.set_column(i, i, 15, formato_moeda)
            elif 'data' in col_lower:
                worksheet.set_column(i, i, 12)
            else:
                worksheet.set_column(i, i, 18)
        
    output.seek(0)
    return output

# Fun√ß√£o para processar os arquivos com feedback de progresso
def processar_arquivos(xml_paths, cnpj_empresa):
    total_arquivos = len(xml_paths)
    progresso = st.progress(0)
    status_text = st.empty()
    
    if total_arquivos > 0:
        # Processar em lotes para melhorar desempenho com muitos arquivos
        resultados = []
        
        # Criar lotes de 100 arquivos para processamento
        lote_size = min(100, total_arquivos)
        for i in range(0, total_arquivos, lote_size):
            lote = xml_paths[i:i+lote_size]
            
            # Processar lote de arquivos
            with ThreadPoolExecutor() as executor:
                lote_resultados = processar_xmls(lote, cnpj_empresa)
                resultados.append(lote_resultados)
                
            # Atualizar progresso
            progresso.progress(min((i+lote_size)/total_arquivos, 1.0))
            status_text.text(f"Processando {min(i+lote_size, total_arquivos)} de {total_arquivos} arquivos...")
            time.sleep(0.1)  # Pequena pausa para atualiza√ß√£o visual
        
        # Consolidar resultados
        df_final = pd.concat(resultados, ignore_index=True) if resultados else pd.DataFrame()
        
        status_text.text("Processamento conclu√≠do!")
        progresso.progress(1.0)
        time.sleep(1)
        status_text.empty()
        progresso.empty()
        
        return df_final
    else:
        status_text.text("Nenhum arquivo para processar")
        time.sleep(1)
        status_text.empty()
        progresso.empty()
        return pd.DataFrame()

# Execu√ß√£o completa de processamento e gera√ß√£o de relat√≥rios
def executar_pipeline(xml_paths, cnpj_empresa):
    if not xml_paths:
        st.warning("‚ö†Ô∏è Nenhum arquivo XML encontrado.")
        return

    df_extraido = processar_arquivos(xml_paths, cnpj_empresa)

    if df_extraido.empty:
        st.warning("‚ö†Ô∏è Nenhum dado extra√≠do dos XMLs.")
        return

    try:
        df_configurado = configurar_planilha(df_extraido)
        st.session_state.df_configurado = df_configurado

        if 'Tipo Nota' in df_configurado.columns:
            df_entrada = df_configurado[df_configurado['Tipo Nota'] == 'Entrada'].copy()
            df_saida = df_configurado[df_configurado['Tipo Nota'] == 'Sa√≠da'].copy()

            with st.spinner("Gerando relat√≥rios..."):
                df_estoque = gerar_estoque_fiscal(df_entrada, df_saida)
                st.session_state.df_estoque = df_estoque

                df_alertas = gerar_alertas_auditoria(df_entrada, df_saida)
                st.session_state.df_alertas = df_alertas

                st.session_state.kpis = gerar_kpis(df_estoque)

                df_resumo = gerar_resumo_mensal(df_estoque)
                st.session_state.df_resumo = df_resumo

                df_apuracao, _ = calcular_apuracao(df_estoque)
                st.session_state.df_apuracao = df_apuracao

                st.session_state.dados_processados = True

                st.success("‚úÖ XMLs processados com sucesso!")
        else:
            st.error("‚ùå A coluna 'Tipo Nota' n√£o foi gerada. Verifique a classifica√ß√£o.")
    except Exception as e:
        st.error(f"Erro ao processar dados: {e}")

# Execu√ß√£o completa de processamento e gera√ß√£o de relat√≥rios
def executar_pipeline(xml_paths, cnpj_empresa):
    if not xml_paths:
        st.warning("‚ö†Ô∏è Nenhum arquivo XML encontrado.")
        return

    df_extraido = processar_arquivos(xml_paths, cnpj_empresa)

    if df_extraido.empty:
        st.warning("‚ö†Ô∏è Nenhum dado extra√≠do dos XMLs.")
        return

    try:
        df_configurado = configurar_planilha(df_extraido)
        st.session_state.df_configurado = df_configurado

        if 'Tipo Nota' in df_configurado.columns:
            df_entrada = df_configurado[df_configurado['Tipo Nota'] == 'Entrada'].copy()
            df_saida = df_configurado[df_configurado['Tipo Nota'] == 'Sa√≠da'].copy()

            with st.spinner("Gerando relat√≥rios..."):
                df_estoque = gerar_estoque_fiscal(df_entrada, df_saida)
                st.session_state.df_estoque = df_estoque

                df_alertas = gerar_alertas_auditoria(df_entrada, df_saida)
                st.session_state.df_alertas = df_alertas

                st.session_state.kpis = gerar_kpis(df_estoque)

                df_resumo = gerar_resumo_mensal(df_estoque)
                st.session_state.df_resumo = df_resumo

                df_apuracao, _ = calcular_apuracao(df_estoque)
                st.session_state.df_apuracao = df_apuracao

                st.session_state.dados_processados = True

                st.success("‚úÖ XMLs processados com sucesso!")
        else:
            st.error("‚ùå A coluna 'Tipo Nota' n√£o foi gerada. Verifique a classifica√ß√£o.")
    except Exception as e:
        st.error(f"Erro ao processar dados: {e}")

# Execu√ß√£o completa de processamento e gera√ß√£o de relat√≥rios
def executar_pipeline(xml_paths, cnpj_empresa):
    if not xml_paths:
        st.warning("‚ö†Ô∏è Nenhum arquivo XML encontrado.")
        return

    df_extraido = processar_arquivos(xml_paths, cnpj_empresa)

    if df_extraido.empty:
        st.warning("‚ö†Ô∏è Nenhum dado extra√≠do dos XMLs.")
        return

    try:
        df_configurado = configurar_planilha(df_extraido)
        st.session_state.df_configurado = df_configurado

        if 'Tipo Nota' in df_configurado.columns:
            df_entrada = df_configurado[df_configurado['Tipo Nota'] == 'Entrada'].copy()
            df_saida = df_configurado[df_configurado['Tipo Nota'] == 'Sa√≠da'].copy()

            with st.spinner("Gerando relat√≥rios..."):
                df_estoque = gerar_estoque_fiscal(df_entrada, df_saida)
                st.session_state.df_estoque = df_estoque

                df_alertas = gerar_alertas_auditoria(df_entrada, df_saida)
                st.session_state.df_alertas = df_alertas

                st.session_state.kpis = gerar_kpis(df_estoque)

                df_resumo = gerar_resumo_mensal(df_estoque)
                st.session_state.df_resumo = df_resumo

                df_apuracao, _ = calcular_apuracao(df_estoque)
                st.session_state.df_apuracao = df_apuracao

                st.session_state.dados_processados = True

                st.success("‚úÖ XMLs processados com sucesso!")
        else:
            st.error("‚ùå A coluna 'Tipo Nota' n√£o foi gerada. Verifique a classifica√ß√£o.")
    except Exception as e:
        st.error(f"Erro ao processar dados: {e}")

# Fun√ß√£o para criar gr√°ficos
def criar_grafico_resumo(df_resumo):
    fig, ax = plt.subplots(figsize=(10, 5))
    
    # Configurar data para plotagem
    df_temp = df_resumo.copy()
    if 'M√™s' in df_temp.columns:
        df_temp['M√™s'] = pd.to_datetime(df_temp['M√™s']).dt.strftime('%b/%Y')
    
    # Plotar gr√°fico de barras
    sns.set_style('whitegrid')
    ax = sns.barplot(x='M√™s', y='Lucro', data=df_temp, color='#1F77B4')
    
    # Adicionar linha de tend√™ncia
    ax2 = ax.twinx()
    sns.lineplot(x=range(len(df_temp)), y='Valor Venda', data=df_temp, 
                 marker='o', color='#FF7F0E', ax=ax2)
    
    # Configura√ß√µes do gr√°fico
    ax.set_title('Resumo Mensal de Vendas e Lucro', fontsize=16)
    ax.set_xlabel('Per√≠odo', fontsize=12)
    ax.set_ylabel('Lucro (R$)', fontsize=12)
    ax2.set_ylabel('Valor de Venda (R$)', fontsize=12)
    
    ax.tick_params(axis='x', rotation=45)
    
    # Ajustar layout
    plt.tight_layout()
    return fig

# Upload ou importa√ß√£o autom√°tica dos XMLs
upload_area = st.container()
with upload_area:
    st.markdown('<div class="sub-header">üì§ Importa√ß√£o de Arquivos</div>', unsafe_allow_html=True)

    if not cnpj_empresa:
        st.warning("Selecione uma empresa antes de importar arquivos")
        st.stop()

    modo = st.radio("Fonte dos XMLs", ["Google Drive", "Upload Manual"])

    if modo == "Google Drive":
        if st.button("üìÇ Buscar XMLs do Drive"):
            with st.spinner("Baixando arquivos do Google Drive..."):
                with tempfile.TemporaryDirectory() as tmpdir:
                    service_account_info = st.secrets["google_service_account"]
                    with open("/tmp/service_account.json", "w") as f:
                        json.dump(service_account_info, f)

                    caminho_chave = "/tmp/service_account.json"
                    pasta_principal_id = ROOT_FOLDER_ID

                    service = criar_servico_drive(caminho_chave)
                    xml_paths = baixar_xmls_empresa_zip(
                        service,
                        pasta_principal_id,
                        empresa_selecionada_nome,
                        tmpdir,
                    )
                    st.success(
                        f"XMLs baixados e extra√≠dos: {len(xml_paths)} arquivos encontrados."
                    )
                    executar_pipeline(xml_paths, cnpj_empresa)
    else:
        uploaded_files = st.file_uploader(
            "Envie seus XMLs ou ZIP", type=["xml", "zip"], accept_multiple_files=True
        )
        if uploaded_files:
            with st.spinner("Processando arquivos..."):
                with tempfile.TemporaryDirectory() as tmpdir:
                    xml_paths = []
                    for file in uploaded_files:
                        filepath = os.path.join(tmpdir, file.name)
                        with open(filepath, "wb") as f:
                            f.write(file.read())
                        if file.name.lower().endswith(".zip"):
                            try:
                                with zipfile.ZipFile(filepath, "r") as zip_ref:
                                    zip_ref.extractall(tmpdir)
                                    xml_paths += [
                                        os.path.join(tmpdir, name)
                                        for name in zip_ref.namelist()
                                        if name.lower().endswith(".xml")
                                    ]
                            except Exception as e:
                                st.error(f"Erro ao extrair arquivo ZIP {file.name}: {e}")
                        elif file.name.lower().endswith(".xml"):
                            xml_paths.append(filepath)

                    executar_pipeline(xml_paths, cnpj_empresa)

# Renderizar resultados se houver dados processados
if st.session_state.dados_processados:
    # Mostrar KPIs em cards
    st.markdown('<div class="sub-header">üìä Indicadores Principais</div>', unsafe_allow_html=True)
    
    kpi_cols = st.columns(3)
    with kpi_cols[0]:
        st.markdown(f"""
        <div class="card">
            <h3>Total Vendido</h3>
            <h2>{formatar_moeda(st.session_state.kpis["Total Vendido (R$)"])}</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with kpi_cols[1]:
        st.markdown(f"""
        <div class="card">
            <h3>Lucro Total</h3>
            <h2>{formatar_moeda(st.session_state.kpis["Lucro Total (R$)"])}</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with kpi_cols[2]:
        st.markdown(f"""
        <div class="card">
            <h3>Estoque Atual</h3>
            <h2>{formatar_moeda(st.session_state.kpis["Estoque Atual (R$)"])}</h2>
        </div>
        """, unsafe_allow_html=True)
    
    # Tabs para diferentes relat√≥rios
    abas = st.tabs(["üì¶ Estoque", "üïµÔ∏è Auditoria", "üìà KPIs e Resumo", "üßæ Apura√ß√£o Fiscal"])
    
    with abas[0]:
        st.markdown('<div class="sub-header">üì¶ Estoque Fiscal</div>', unsafe_allow_html=True)
        
        # Filtros de data para estoque
        if 'Data Base' in st.session_state.df_estoque.columns:
            filtro_cols = st.columns(3)
            with filtro_cols[0]:
                anos_disp, meses_disp = obter_anos_meses_unicos(
                    st.session_state.df_estoque,
                    'Data Base',
                )
                ano_selecionado = st.selectbox(
                    "Ano", [None] + anos_disp, key="estoque_ano"
                )

            with filtro_cols[1]:
                mes_selecionado = st.selectbox(
                    "M√™s", [None] + meses_disp, key="estoque_mes"
                )
                
            with filtro_cols[2]:
                situacao_opcoes = ['Todos', 'Em Estoque', 'Vendido']
                situacao_selecionada = st.selectbox("Situa√ß√£o", situacao_opcoes, key="estoque_situacao")
            
            # Aplicar filtros
            df_estoque_filtrado = aplicar_filtro_periodo(
                st.session_state.df_estoque,
                'Data Base',
                ano_selecionado,
                mes_selecionado,
            )
                
            if situacao_selecionada != 'Todos':
                df_estoque_filtrado = df_estoque_filtrado[df_estoque_filtrado['Situa√ß√£o'] == situacao_selecionada]
        else:
            df_estoque_filtrado = st.session_state.df_estoque
        
        # Mostrar tabela de estoque com formata√ß√£o amig√°vel
        st.dataframe(
            formatar_df_exibicao(df_estoque_filtrado),
            use_container_width=True,
        )
        
        # Bot√£o para download
        st.download_button(
            label="üì• Baixar Estoque",
            data=gerar_excel(df_estoque_filtrado, "Estoque"),
            file_name="Estoque.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    
    with abas[1]:
        st.markdown('<div class="sub-header">üïµÔ∏è Relat√≥rio de Auditoria</div>', unsafe_allow_html=True)
        
        if not st.session_state.df_alertas.empty:
            st.dataframe(
                formatar_df_exibicao(st.session_state.df_alertas),
                use_container_width=True,
            )
            
            # Mostrar alertas cr√≠ticos
            alertas_criticos = st.session_state.df_alertas.shape[0]
            st.markdown(f"""
            <div class="warning-card">
                <h3>‚ö†Ô∏è {alertas_criticos} alertas identificados</h3>
                <p>Verifique poss√≠veis inconsist√™ncias nos dados fiscais.</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div class="success-card">
                <h3>‚úÖ Sem alertas de auditoria</h3>
                <p>Os dados fiscais analisados n√£o apresentam inconsist√™ncias.</p>
            </div>
            """, unsafe_allow_html=True)
        
        st.download_button(
            label="üì• Baixar Relat√≥rio de Auditoria",
            data=gerar_excel(st.session_state.df_alertas, "Auditoria"),
            file_name="Auditoria.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    
    with abas[2]:
        st.markdown('<div class="sub-header">üìä KPIs e Resumo Mensal</div>', unsafe_allow_html=True)
        
        # Mostrar gr√°fico de resumo mensal
        if not st.session_state.df_resumo.empty:
            grafico = criar_grafico_resumo(st.session_state.df_resumo)
            st.pyplot(grafico)
            
            # Mostrar tabela de resumo mensal
            st.markdown("### üìÖ Resumo Mensal")
            st.dataframe(
                formatar_df_exibicao(st.session_state.df_resumo),
                use_container_width=True,
            )
            
            st.download_button(
                label="üì• Baixar Resumo Mensal",
                data=gerar_excel(st.session_state.df_resumo, "Resumo"),
                file_name="Resumo_Mensal.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        else:
            st.info("Sem dados de resumo mensal para mostrar.")
    
    with abas[3]:
        st.markdown('<div class="sub-header">üßæ Apura√ß√£o Fiscal</div>', unsafe_allow_html=True)
        
        if not st.session_state.df_apuracao.empty:
            # Mostrar tabela de apura√ß√£o fiscal
            st.dataframe(
                formatar_df_exibicao(st.session_state.df_apuracao),
                use_container_width=True,
            )
            
            # Explica√ß√£o do c√°lculo
            st.markdown("""
            <div class="info-card">
                <h3>üìù Como funciona o c√°lculo fiscal</h3>
                <p>A apura√ß√£o fiscal √© calculada com base nos seguintes par√¢metros:</p>
                <ul>
                    <li>ICMS Presumido: 19% sobre o lucro</li>
                    <li>PIS/COFINS Presumido: 3,65% sobre o lucro</li>
                    <li>Base IRPJ/CSLL: 32% sobre o lucro</li>
                    <li>IRPJ: 15% sobre a base</li>
                    <li>Adicional IRPJ: 10% sobre o que exceder R$ 60.000 por trimestre</li>
                    <li>CSLL: 9% sobre a base</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
            
            st.download_button(
                label="üì• Baixar Apura√ß√£o Fiscal",
                data=gerar_excel(st.session_state.df_apuracao, "Apuracao"),
                file_name="Apuracao_Fiscal.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        else:
            st.info("Sem dados de apura√ß√£o fiscal para mostrar.")
    
    # Download de todos os dados
    st.markdown('<div class="sub-header">üì• Baixar Dados Completos</div>', unsafe_allow_html=True)
    
    st.download_button(
        label="üì• Baixar Planilha Completa",
        data=gerar_excel(st.session_state.df_configurado, "Extracao_Completa"),
        file_name="Extracao_Completa.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
else:
    # Mostrar mensagem inicial
    st.markdown("""
    <div class="info-card">
        <h3>üëã Bem-vindo ao Painel Fiscal de Ve√≠culos</h3>
        <p>Para come√ßar, selecione uma empresa e fa√ßa upload dos arquivos XML das notas fiscais.</p>
        <p>O sistema ir√° processar os dados e gerar relat√≥rios de estoque, auditoria, KPIs e apura√ß√£o fiscal.</p>
    </div>
    """, unsafe_allow_html=True)
